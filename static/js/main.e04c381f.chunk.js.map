{"version":3,"sources":["components/SeacrhBar/Searchbar.js","components/ImgsList/ImageGalleryItem.js","components/ImgsList/ImageGallery.js","components/LoadMoreBtn/LoadMoreBtn.js","components/Loader/Loader.js","components/Error/Error.js","components/services/FetchImgs.js","components/Modal/Modal.js","components/Container/Container.js","components/App.js","index.js"],"names":["Searchbar","onSubmit","useState","imgName","setImgName","className","e","preventDefault","trim","alert","type","onChange","currentTarget","value","toLowerCase","name","autoComplete","autoFocus","placeholder","ImageGalleryItem","webformatURL","largeImageURL","alt","width","src","ImageGallery","entriesImgs","openModal","onClick","target","dataset","source","map","id","tags","LoadMoreBtn","SpinLoader","color","height","timeout","style","position","top","left","Error","message","FetchImgs","page","fetch","then","response","json","catch","error","Promise","reject","modalRoot","document","querySelector","Modal","onClose","img","useEffect","window","addEventListener","handleKeyDownESC","handleBackdropClick","code","createPortal","Container","children","App","setEntriesImgs","setPage","setError","status","setStatus","showModal","setShowModal","setLargeImageURL","forLoadMore","setForLoadMore","getImgFromFetch","pageNumber","hits","length","data","prevState","scroll","scrollTo","documentElement","scrollHeight","behavior","toggleModalWindow","prop","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e04c381f.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction Searchbar({ onSubmit }) {\n  const [imgName, setImgName] = useState(\"\");\n\n  const handleChange = (e) => {\n    setImgName(e.currentTarget.value.toLowerCase().trim());\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (imgName.trim() === \"\") {\n      alert(\"Please, type what do you want to see.\");\n      return;\n    }\n    onSubmit(imgName); // отпарвка данных\n    setImgName(\"\"); // очищение формы\n  };\n  return (\n    <header className=\"Searchbar\">\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n\n        <input\n          onChange={handleChange}\n          value={imgName}\n          name=\"imgName\"\n          className=\"SearchForm-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n        />\n      </form>\n    </header>\n  );\n}\n// class Searchbar extends Component {\n//   state = {\n//     imgName: \"\",\n//   };\n//   handleChange = (e) => {\n//     this.setState({ imgName: e.currentTarget.value.toLowerCase().trim() });\n//   };\n\n//   handleSubmit = (e) => {\n//     e.preventDefault();\n//     if (this.state.imgName.trim() === \"\") {\n//       alert(\"Please, type what do you want to see.\");\n//       // toast.error(\"Please, type what do you want to see.\");\n//       return;\n//     }\n//     this.props.onSubmit(this.state.imgName); // отпарвка данных\n\n//     this.setState({ imgName: \"\" }); // очищение формы\n//   };\n//   render() {\n//     return (\n//       <header className=\"Searchbar\">\n//         <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\n//           <button type=\"submit\" className=\"SearchForm-button\">\n//             <span className=\"SearchForm-button-label\">Search</span>\n//           </button>\n\n//           <input\n//             onChange={this.handleChange}\n//             value={this.state.imgName}\n//             name=\"imgName\"\n//             className=\"SearchForm-input\"\n//             type=\"text\"\n//             autoComplete=\"off\"\n//             autoFocus\n//             placeholder=\"Search images and photos\"\n//           />\n//         </form>\n//       </header>\n//     );\n//   }\n// }\nexport default Searchbar;\n","import PropTypes from \"prop-types\";\n//\nfunction ImageGalleryItem({ webformatURL, largeImageURL, alt }) {\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img\n        width=\"240\"\n        src={webformatURL}\n        alt={alt}\n        data-source={largeImageURL}\n        className=\"ImageGalleryItem-image\"\n      />\n    </li>\n  );\n}\nImageGalleryItem.propTypes = {\n  webformatURL: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  alt: PropTypes.string.isRequired,\n  largeImageURL: PropTypes.string.isRequired,\n};\nexport default ImageGalleryItem;\n","import PropTypes from \"prop-types\";\nimport ImageGalleryItem from \"./ImageGalleryItem\";\n\nfunction ImageGallery({ entriesImgs, openModal }) {\n  return (\n    <div>\n      <ul\n        className=\"ImageGallery\"\n        onClick={(e) => openModal(e.target.dataset.source)}\n      >\n        {entriesImgs.map(({ id, webformatURL, largeImageURL, tags }) => {\n          return (\n            <ImageGalleryItem\n              key={id}\n              id={id}\n              webformatURL={webformatURL}\n              alt={tags}\n              largeImageURL={largeImageURL}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nImageGallery.propTypes = {\n  entriesImgs: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      webformatURL: PropTypes.string.isRequired,\n      tags: PropTypes.string.isRequired,\n      largeImageURL: PropTypes.string.isRequired,\n    })\n  ),\n  openModal: PropTypes.func.isRequired,\n};\nexport default ImageGallery;\n","import PropTypes from \"prop-types\";\n\nfunction LoadMoreBtn({ onClick }) {\n  return (\n    <button type=\"button\" onClick={onClick} className=\"Button\">\n      Load more\n    </button>\n  );\n}\nLoadMoreBtn.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\nexport default LoadMoreBtn;\n","import Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nfunction SpinLoader() {\n  return (\n    <Loader\n      type=\"BallTriangle\"\n      color=\"#85309f\"\n      height={100}\n      width={100}\n      timeout={3000}\n      style={{\n        position: \"fixed\",\n        top: \"40%\",\n        left: \"50%\",\n      }}\n    />\n  );\n}\nexport default SpinLoader;\n// class SpinLoader extends Component {\n//   render() {\n//     return (\n//       <Loader\n//         type=\"BallTriangle\"\n//         color=\"#85309f\"\n//         height={100}\n//         width={100}\n//         timeout={3000}\n//         style={{\n//           position: \"fixed\",\n//           top: \"40%\",\n//           left: \"50%\",\n//         }}\n//       />\n//     );\n//   }\n// }\n","import PropTypes from \"prop-types\";\n// import errorImage from \"../images/cats.jpg\";\n\n//\nexport default function Error({ message }) {\n  return (\n    <>\n      <div>\n        {/* <img src={errorImage} width=\"240\" height=\"240\" alt=\"cats\" /> */}\n        <p className=\"error-message\">{message}</p>\n      </div>\n    </>\n  );\n}\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","const KEY = \"22980128-788f7e90de699cd9b75eacbcd\";\n// const BASE_URL = `https://pixabay.com/api/?q=${name}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=12`;\n\nfunction FetchImgs(name, page) {\n  return fetch(\n    `https://pixabay.com/api/?q=${name}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=12`\n  )\n    .then((response) => response.json())\n    .catch((error) => Promise.reject(error));\n}\n\nexport default FetchImgs;\n\n///\n// function FetchImgs(name, page) {\n//   return fetch(\n//     `https://pixabay.com/api/?q=${name}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=12`\n//   ).then((response) => {\n//     if (response.ok) {\n//       // console.log(response);\n//       response.json();\n//     }\n//     return Promise.reject(new Error(`\"${name}\" isn't correctly, try again`));\n//   });\n// }\n\n// const api = {\n//   FetchImgs,\n// };\n","import PropTypes from \"prop-types\";\nimport { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst modalRoot = document.querySelector(\"#modal-root\");\n\nfunction Modal({ onClose, img }) {\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDownESC);\n    window.addEventListener(\"keydown\", handleBackdropClick);\n  });\n  const handleKeyDownESC = (e) => {\n    if (e.code === \"Escape\") {\n      onClose();\n    }\n  };\n  const handleBackdropClick = (e) => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <div className=\"Overlay\" onClick={handleBackdropClick}>\n      <div className=\"Modal\">\n        <img src={img} alt=\"\" />\n      </div>\n    </div>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\nexport default Modal;\n","import React from \"react\";\nexport default function Container({ children }) {\n  return <div className=\"container\">{children}</div>;\n}\n","import { useState, useEffect } from \"react\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nimport Searchbar from \"./SeacrhBar/Searchbar\";\nimport ImageGallery from \"./ImgsList/ImageGallery\";\nimport LoadMoreBtn from \"./LoadMoreBtn/LoadMoreBtn\";\nimport SpinLoader from \"./Loader/Loader\";\nimport Error from \"./Error/Error.js\";\nimport FetchImgs from \"./services/FetchImgs\";\nimport Modal from \"./Modal/Modal\";\nimport Container from \"./Container/Container\";\nimport \"./styles/Style.scss\";\n\nfunction App() {\n  const [imgName, setImgName] = useState(\"\");\n  const [entriesImgs, setEntriesImgs] = useState([]);\n  const [page, setPage] = useState(1);\n  const [error, setError] = useState(\"Something went wrong, please try again\");\n  const [status, setStatus] = useState(\"idle\");\n  const [showModal, setShowModal] = useState(false);\n  const [largeImageURL, setLargeImageURL] = useState(\"\");\n  const [forLoadMore, setForLoadMore] = useState(false);\n  //\n\n  useEffect(() => {\n    if (!imgName) {\n      return;\n    }\n    setStatus(\"pending\");\n    getImgFromFetch(imgName, page);\n    setStatus(\"resolved\");\n    setForLoadMore(true);\n  }, [imgName, page]);\n\n  const getImgFromFetch = (imgName, pageNumber) => {\n    FetchImgs(imgName, pageNumber)\n      .then((entriesImgs) => {\n        // console.log(entriesImgs.hits, \"entriesImgs\");\n        if (!entriesImgs.hits.length) {\n          return (\n            alert(\"No such pictures, try again\"),\n            setError(error),\n            setStatus(\"rejected\")\n          );\n        } else {\n          const data = entriesImgs.hits.map(\n            ({ id, tags, webformatURL, largeImageURL }) => {\n              setLargeImageURL(largeImageURL);\n              return {\n                id,\n                webformatURL,\n                tags,\n                largeImageURL,\n              };\n            }\n          );\n          setEntriesImgs((prevState) => [...prevState, ...data]);\n\n          setStatus(\"resolved\");\n        }\n        scroll();\n      })\n      .catch((error) => setError(error), setStatus(\"rejected\"));\n  };\n  const scroll = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: \"smooth\",\n    });\n  };\n  const handleFormSubmit = (imgName) => {\n    setImgName(imgName);\n    setPage(page);\n  };\n  const toggleModalWindow = (prop) => {\n    setShowModal(!showModal);\n    setLargeImageURL(prop);\n  };\n  const pageIncrement = () => {\n    setPage(page + 1);\n    setStatus(\"pending\");\n  };\n  return (\n    <Container className=\"container\">\n      <Searchbar onSubmit={handleFormSubmit} />\n      {status === \"idle\" && (\n        <p className=\"header\">Please, type the image name</p>\n      )}\n      {status === \"pending\" && (\n        <>\n          <ImageGallery\n            entriesImgs={entriesImgs}\n            openModal={toggleModalWindow}\n          />\n          <SpinLoader />\n        </>\n      )}\n      {status === \" rejected\" && <Error message={error} />}\n      {status === \"resolved\" && (\n        <>\n          <ImageGallery\n            entriesImgs={entriesImgs}\n            openModal={toggleModalWindow}\n          />\n          {forLoadMore && <LoadMoreBtn onClick={pageIncrement} />}\n        </>\n      )}\n      {showModal && <Modal onClose={toggleModalWindow} img={largeImageURL} />}\n    </Container>\n  );\n}\n//\n// class oldApp extends Component {\n//   state = {\n//     total: [],\n//     imgName: \"\",\n//     entriesImgs: [],\n//     page: 1,\n//     error: \"\",\n//     status: \"idle\",\n//     showModal: false,\n//     largeImageURL: \"\",\n//     forLoadMore: false,\n//   };\n//   componentDidUpdate(prevProps, prevState) {\n//     const prevName = prevState.imgName;\n//     const nextName = this.state.imgName;\n//     const { page } = this.state;\n//     //\n//     if (prevName !== nextName) {\n//       this.setState({ entriesImgs: [], page: 1, status: \"pending\" });\n\n//       this.getImgFromFetch(nextName, page);\n//     }\n//     if (prevState.page !== page && page !== 1) {\n//       this.getImgFromFetch(nextName, page);\n//     }\n//   }\n\n//   getImgFromFetch = (imgName, pageNumber) => {\n//     FetchImgs(imgName, pageNumber)\n//       .then((entriesImgs) => {\n//         if (!entriesImgs.hits.length) {\n//           alert(\"No such pictures, try again\");\n//           this.setState({\n//             error: \"Something went wrong, please try again\",\n//             status: \"rejected\",\n//           });\n//         } else {\n//           const data = entriesImgs.hits.map(\n//             ({ id, tags, webformatURL, largeImageURL }) => {\n//               return {\n//                 id,\n//                 webformatURL,\n//                 tags,\n//                 largeImageURL,\n//               };\n//             }\n//           );\n//           this.setState((prevState) => ({\n//             entriesImgs: [...prevState.entriesImgs, ...data],\n//             status: \"resolved\",\n//             forLoadMore: true,\n//           }));\n//         }\n\n//         this.scroll();\n//       })\n//       .catch((error) =>\n//         this.setState({\n//           error,\n//           status: \"rejected\",\n//         })\n//       );\n//   };\n\n//   scroll = () => {\n//     window.scrollTo({\n//       top: document.documentElement.scrollHeight,\n//       behavior: \"smooth\",\n//     });\n//   };\n\n//   pageIncrement = () => {\n//     return this.setState({\n//       page: this.state.page + 1,\n//       status: \"pending\",\n//     });\n//   };\n//   handleFormSubmit = (imgName) => {\n//     this.setState({ imgName, page: 1 });\n//   };\n\n//   toggleModalWindow = (prop) => {\n//     return this.setState(({ showModal }) => ({\n//       showModal: !showModal,\n//       largeImageURL: prop,\n//     }));\n//   };\n\n//   render() {\n//     const {\n//       entriesImgs,\n//       error,\n//       status,\n//       showModal,\n//       largeImageURL,\n//       forLoadMore,\n//     } = this.state;\n//     return (\n//       <Container className=\"container\">\n//         <Searchbar onSubmit={this.handleFormSubmit} />\n//         {status === \"idle\" && (\n//           <p className=\"header\">Please, type the image name</p>\n//         )}\n//         {status === \"pending\" && (\n//           <>\n//             <ImageGallery\n//               entriesImgs={entriesImgs}\n//               openModal={this.toggleModalWindow}\n//             />\n//             <SpinLoader />\n//           </>\n//         )}\n\n//         {status === \" rejected\" && <Error message={error} />}\n//         {status === \"resolved\" && (\n//           <>\n//             <ImageGallery\n//               entriesImgs={entriesImgs}\n//               openModal={this.toggleModalWindow}\n//             />\n//             {forLoadMore && <LoadMoreBtn onClick={this.pageIncrement} />}\n//           </>\n//         )}\n//         {showModal && (\n//           <Modal onClose={this.toggleModalWindow} img={largeImageURL} />\n//         )}\n//         {/* <ToastContainer autoClose={3000} /> */}\n//       </Container>\n//     );\n//   }\n// }\n\nexport default App;\n// getImgFromFetchOnBtn = (imgName, page) => {\n//   imgAPI\n//     .FetchImgs(imgName, page)\n//     .then(({ hits }) => {\n//       const data = this.getData(hits);\n//       this.setState((prev) => ({\n//         entriesImgs: [...prev.entriesImgs, ...data],\n//         status: \"resolved\",\n//       }));\n//       this.scroll();\n//     })\n//     .catch((error) => this.setState({ error, status: \"reject\" }));\n// };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App.js\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}